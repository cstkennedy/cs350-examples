package edu.odu.cs.cs350.numbers;

import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Arrays;

import edu.odu.cs.cs350.unitTesting.UnitTestTracker;

/**
 * Arithmetic sequence generator modeled after the Python 3 <code>range()</code>
 * function.
 * <p>
 * It is legal for sequences to be monotonically increasing
 * (e.g., 1, 2, 3, ...) or monotonically decreasing (e.g., -2, -4, -6, ...).
 *
 * @see <a href="https://docs.python.org/3/library/stdtypes.html#range">
 *          Python range() function documentation
 *      </a>
 *
 * @author Thomas J. Kennedy
 */
public class NumberSequence implements Cloneable, Iterable<Integer>
{
    // Test Tracker Setup
    private List<String> mutators = Arrays.asList("next", "clone");

    private List<String> accessors = Arrays.asList("first", "step",
                                                   "currentLast", "length",
                                                   "equals", "hashCode",
                                                   "iterator", "toString");

    private UnitTestTracker utt = new UnitTestTracker(NumberSequence.class,
                                                      mutators, accessors);
    // End Test Tracker Setup


    /**
     * Collection of all numbers generated thus far, starting with
     * <code>firstNumber</code>.
     */
    private List<Integer> allNumbers;

    /**
     * First number (i.e., start of the arithmetic sequence).
     */
    private int firstNumber;

    /**
     * Step size between each adjacent pair of numbers.
     */
    private int difference;

    /**
     * Initialize the Number Sequence:
     * <ul>
     *  <li> Set the start to 1.</li>
     *  <li> Set the step size to 1.</li>
     *  <li> Initialize number storage.</li>
     * </ul>
     *
     * The start, 1, is generated immediately
     */
    public NumberSequence()
    {
        utt.mutate();

        this.firstNumber = 1;
        this.difference = 1;

        this.allNumbers = new ArrayList<Integer>();
        this.allNumbers.add(1);
    }

    /**
     * Initialize the Number Sequence and prepare to generate a set of numbers
     * from an arbitrary starting point, with an arbitrary step size.
     *
     * The start, aStart, is generated immediately.
     *
     * @param aStart starting number
     * @param aStep difference between each number and the next
     */
    public NumberSequence(int aStart, int aStep)
    {
        utt.mutate();

        this.firstNumber = aStart;
        this.difference = aStep;

        this.allNumbers = new ArrayList<Integer>();
        this.allNumbers.add(aStart);
    }

    /**
     * Generate the next number in the sequence.
     */
    public void next()
    {
        utt.mutate();

        allNumbers.add(currentLast() + difference);
    }

    /**
     * Retrieve the first number in the sequence.
     *
     * @return first number as an `int`
     */
    public int first()
    {
        utt.access();

        return firstNumber;
    }

    /**
     * Retrieve the difference between each adjacent pair of numbers (i.e., the
     * step size).
     *
     * @return step size
     */
    public int step()
    {
        utt.access();

        return difference;
    }

    /**
     * Get the last (most recently generated) number.
     *
     * @return current last number as an `int`
     */
    public int currentLast()
    {
        utt.access();

        return allNumbers.get(allNumbers.size() - 1).intValue();
    }

    /**
     * Current length of the arithmetic sequence (i.e., how many numbers of
     * been generated).
     *
     * @return length of the sequence
     */
    public int length()
    {
        utt.access();

        return allNumbers.size();
    }

    @Override
    public Object clone()
    {
        this.utt.access();

        NumberSequence aCopy = new NumberSequence(this.firstNumber,
                                                  this.difference);

        aCopy.allNumbers = new ArrayList<>(this.allNumbers);

        aCopy.utt.mutate();
        return aCopy;
    }

    @Override
    public boolean equals(Object rhs)
    {
        if (!(rhs instanceof NumberSequence))
        {
            return false;
        }

        NumberSequence rhsSeq = (NumberSequence) rhs;

        this.utt.access();
        rhsSeq.utt.access();

        return this.allNumbers.equals(rhsSeq.allNumbers);
    }

    @Override
    public int hashCode()
    {
        utt.access();

        return allNumbers.hashCode();
    }

    @Override
    public Iterator<Integer> iterator()
    {
        utt.access();

        return allNumbers.iterator();
    }

    /**
     * List all all numbers generated thus far, in order.
     * <p>
     * <b>Any formatting is acceptable.</b>
     */
    @Override
    public String toString()
    {
        utt.access();

        StringBuilder bld = new StringBuilder();

        for (Integer aNum : allNumbers) {
            bld.append(aNum);
        }

        return bld.toString();
    }
}
