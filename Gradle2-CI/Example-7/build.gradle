buildscript {
    repositories {
        jcenter()

        // Add Dr Zeil's plugin repo
        ivy {
            url 'https://secweb.cs.odu.edu/~zeil/ivyrepo'
        }
    }
    dependencies {
        classpath "org.ysb33r.gradle:doxygen:0.2"

        // Add two Buildscript Dependencies
        classpath "org.hidetake:gradle-ssh-plugin:2.5.0+"
        classpath "edu.odu.cs.zeil:report_accumulator:1.2+"

    }
}

// Add report task imports
import edu.odu.cs.zeil.report_accumulator.ReportStats
import edu.odu.cs.zeil.report_accumulator.ReportsDeploy
// End report task imports

// And the ssh plugin
apply plugin: "org.hidetake.ssh"

apply plugin: "java"
apply plugin: "eclipse"
//apply plugin: "org.ysb33r.doxygen"

apply plugin: "jacoco"

apply plugin: "findbugs"
apply plugin: "pmd"

apply plugin: "checkstyle"


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    testCompile "junit:junit:4.12"
    testCompile "org.hamcrest:hamcrest-library:1.3"
}

jar {
    baseName = "RosterExample"
}

test {
    reports {
        html.enabled = true
    }           
    ignoreFailures = true

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    jacoco {
        append = false
    }
}

javadoc {
    failOnError false    
}

/*
doxygen {
    generate_html true

    template "src/documentation.config"

    source new File(projectDir,"src/main/java")
    //source new File(projectDir,"src/test/java")
    outputDir new File(buildDir,"docs")
}
*/

/**
 * Run code style/error checks
 */
findbugsMain {
    ignoreFailures true
    reports {
        xml.enabled false
        html.enabled true
    }
}

// Add out of curiosity
findbugsTest {
    ignoreFailures true
    reports {
        xml.enabled false
        html.enabled true
    }
}

pmd {
    ignoreFailures = true
    ruleSets = [
        "java-basic",
        "java-braces",
        //"java-clone",
        "java-codesize",
        //"java-comments",
        //"java-controversial",
        //"java-coupling",
        //"java-design",
        "java-empty",
        //"java-finalizers",
        "java-imports",
        //"java-junit",
        "java-naming",
        //"java-optimizations",
        "java-strictexception",
        "java-strings",
        "java-sunsecure",
        "java-typeresolution",
        "java-unnecessary",
        "java-unusedcode"
    ]
}

jacoco {
    toolVersion = "0.8.0"
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled true
    }
}


// Check Style Config
checkstyle {
    ignoreFailures = true
    showViolations = false
}

tasks.withType(Checkstyle) {
    reports {
        html.destination project.file("build/reports/checkstyle/main.html")
    }
}
checkstyleTest.enabled = false
// End Checkstyle config

// Setup Statistics tasks
task collectStats (type: ReportStats, dependsOn: "build") {
    reportsURL = "http://www.cs.odu.edu/~tkennedy/examples/cs350/statistics/"
}

// Deploy csv stats files
task report (type: ReportsDeploy, dependsOn: "collectStats") {
    // Test locally on atria
    deployDestination = "/home/tkennedy/public_html/examples/cs350/statistics/"
}
